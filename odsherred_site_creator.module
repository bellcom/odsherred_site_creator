<?php
/**
 * @file
 * Code for the Site creation moduler feature.
 */

include_once 'odsherred_site_creator.features.inc';
/**
 * @file
 * This is the module file containing the logic for the creator.
 */

/**
 * Implementation of hook_perm()
 */
function odsherred_site_creator_permission() {
  return array('use site creator' => array(
   'title' => t('Use site creator'),
   'description' => t('Create new subsites')
   )
  );
}

/**
 * Implements hook_menu().
 */
function odsherred_site_creator_menu() {
  $items = array();
  $items['admin/config/subsites'] = array(
    'title' => 'Create subsites settings',
    'description' => 'Site creator and other settings',
    'position' => 'right',
    'weight' => -10,
    'page callback' => 'system_admin_menu_block_page',
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
    'access arguments' => array('use site creator'),
  );
  $items['admin/config/subsites/sitecreate'] = array(
    'title' => 'Site creator',
    'access arguments' => array('use site creator'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('odsherred_site_creator_form'),
  );
  $items['subsite/%/%'] = array(
    'page callback' => 'odsherred_site_creator_data_page',
    'page arguments' => array(1, 2),
    'access callback' => TRUE,
  );
  return $items;
}

/**
 * Implements hook_form_alter().
 */
function odsherred_site_creator_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'subsite_node_form') {
    // Site title cannot be altered.
    if ($form['#node']->title) {
      $form['title']['#disabled'] = TRUE;
    }

    // Suffix domain to form.
    $domain_suffix = variable_get('bc_subsites_domain_suffix');
    $form['title']['#field_suffix'] = $domain_suffix;

    // Hide unwanted form stuff.
    $form['comment_settings']['#access'] = FALSE;
    $form['revision_information']['#access'] = FALSE;
    $form['additional_settings']['#access'] = FALSE;
    $form['path']['#access'] = FALSE;
  }
}

/**
 * Validate subsite node form.
 */
function odsherred_site_creator_node_validate($node, $form, &$form_state) {
  if ($node->type == 'subsite') {
    // Validate e-mail address.
    if (!valid_email_address($form_state['values']['field_admin_mail'][LANGUAGE_NONE][0]['value'])) {
      form_set_error('field_admin_mail', t('Du skal indtaste en gyldig e-mail adresse'));
    }

    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'subsite')
      ->propertyCondition('title', $node->title);
    $result = $query->execute();

    if (!empty($result['node']) && !$node->nid) {
      form_set_error('title', 'Det indtastede navn er allerede i brug.');
    }

    // Validate subsite addresses.
    foreach ($form_state['values']['field_domains'][LANGUAGE_NONE] as $delta => $value) {
      if (is_numeric($delta)) {
        if ($value['value'] && !_bc_subsites_is_valid_domain_name($value['value'])) {
          form_set_error('field_domains][' . LANGUAGE_NONE . '][' . $delta, 'Det indtastede domÃ¦ne er ikke gyldigt.');
        }
      }
    }
  }
}

/**
 * Return data for subsite.
 */
function odsherred_site_creator_data_page($site_name, $key) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'subsite')
    ->fieldCondition('field_domains', 'value', $site_name);
  $result = $query->execute();

  if (isset($result['node'])) {
    $node = node_load(key($result['node']));
  }
  if ($node && _odsherred_site_creator_valid_subsite($node, $key)) {
    drupal_json_output($node);
  }
}

/**
 * Validate the subsite for fetching subsite data.
 */
function _odsherred_site_creator_valid_subsite($node, $key) {
  if ($field = field_get_items('node', $node, 'field_admin_mail')) {
    return $key == md5($field[0]['value']);
  }
  return FALSE; 
}

/**
 * Implements hook_node_presave().
 */
function odsherred_site_creator_node_presave($node) {
  $sitename = $node->title;
  $domains = array();

  $field = field_get_items('node', $node, 'field_domains');
  foreach ($field as $delta => $value) {
    $domains[] = $value['value'];
  }

  $field = field_get_items('node', $node, 'field_admin_mail');
  $email = $field[0]['value'];

  // Create the site.
  if ($node->is_new) {
    $form_state['values']['title'] = $sitename;
    $form_state['values']['url'] = $domains[0];
    $form_state['values']['mail'] = $email;

    odsherred_site_creator_form_submit(array(), $form_state);
  }
}

/**
 * Form callback for creator form.
 */
function odsherred_site_creator_form() {
  $form = array(
    'title' => array(
      '#title' => t('Title'),
      '#description' => t('Descriptive name for the site, for later reference.'),
      '#type' => 'textfield',
    ),
    'url' => array(
      '#title' => t('Url'),
      '#description' => t('Subsite URL, without protocol prefix. ie. <strong>sub1.site.com</strong>'),
      '#type' => 'textfield',
    ),
    'mail' => array(
      '#title' => t('E-mail'),
      '#description' => t('Contact e-mail for the site.'),
      '#type' => 'textfield',
    ),
    'submit' => array(
      '#type' => 'submit',
      '#value' => t('Save'),
    ),
  );
  return $form;
}

/**
 * Implements hook_FORM_submit().
 */
function odsherred_site_creator_form_submit($form, &$form_state) {
  $queue = 'public://odsherred-creator/queue';
  $complete = 'public://odsherred-creator/complete';
  $failed = 'public://odsherred-creator/failed';
  if (file_prepare_directory($queue, FILE_CREATE_DIRECTORY || FILE_MODIFY_PERMISSIONS) &&
      file_prepare_directory($complete, FILE_CREATE_DIRECTORY || FILE_MODIFY_PERMISSIONS) &&
      file_prepare_directory($failed, FILE_CREATE_DIRECTORY || FILE_MODIFY_PERMISSIONS)) {
        
    $password = user_password();

    $data = "TITLE=\"" . $form_state['values']['title'] . "\"\n";
    $data .= "SITENAME=\"" . $form_state['values']['url'] . "\"\n";
    $data .= "URL=\"" . $form_state['values']['url'] . "\"\n";
    $data .= "PROFILE=\"odsherred_subsite\"\n";
    $data .= "EMAIL=\"" . $form_state['values']['mail'] . "\"\n";
    $data .= "ADMINPASS=\"" . $password . "\"\n";

    $uniqid = uniqid();
    if (file_unmanaged_save_data($data, $queue . '/' . $uniqid . '.txt')) {
      drupal_set_message(t('Site @name ( @url )queue for creation. Here are your credentials:', array('@name' => $form_state['values']['title'], '@url' => $form_state['values']['url'])) .'<br />'. t('username: ') . 'admin <br />' . t('password: ') . $password, 'status');
    }
    else {
      drupal_set_message('Failed to write file. Check temporary directory setup.', 'error');
    }
  }
  else {
    drupal_set_message('Failed to create site!, check public files directory.', 'error');
  }
}

/**
 * Validate domain name.
 */
function _bc_subsites_is_valid_domain_name($domain_name) {
  if (strpos($domain_name, '.') === FALSE) {
    return FALSE;
  }

  // http://stackoverflow.com/questions/1755144/how-to-validate-domain-name-in-php
  return (preg_match("/^([a-z\d](-*[a-z\d])*)(\.([a-z\d](-*[a-z\d])*))*$/i", $domain_name)
          && preg_match("/^.{1,253}$/", $domain_name)
          && preg_match("/^[^\.]{1,63}(\.[^\.]{1,63})*$/", $domain_name));
}
